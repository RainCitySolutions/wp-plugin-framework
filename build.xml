<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE project>

<project name="wp-plugin-framework" default="dist">

	<property name="buildDir" value="${project.basedir}/build" />
	<property name="reportDir" value="${project.basedir}/report" />
	<property name="composer.phar" value="${project.basedir}/bin/composer.phar" />

	<property name="zipFileName" value="${phing.project.name}_${build.version}.zip" />
	<property name="zipFile" value="${buildDir}/${zipFileName}" />
	
	<taskdef classname="Phing\Tasks\Ext\Coverage\CoverageSetupTask" name="coverage-setup" />

	<target name="dist" depends="prepare, setBuildVersion, clean, composer, lint, test" />

	<target name="prepare">
		<echo msg="Making directory ${buildDir}" />
		<mkdir dir="${buildDir}" />
		<mkdir dir="${reportDir}" />
	</target>

	<target name="setBuildVersion">
		<version releasetype="Bugfix" file="version.txt" property="build.version"/>
		<echo msg="build.version: ${build.version}" />
		<if>
            <available file="composer.json" property="composer_json_exists" />
            <then>
				<reflexive file="composer.json">
					<filterchain>
						<replaceregexp>
							<regexp
								pattern="&quot;version&quot; *: *&quot;[0-9]+\.[0-9]+\.[0-9]+&quot;,"
								replace="&quot;version&quot; : &quot;${build.version}&quot;," />
						</replaceregexp>
					</filterchain>
				</reflexive>
            </then>
        </if>
        <if>
            <available file="${project.basedir}/src/entryPoint.php" property="entrypoint_php_exists" />
            <then>
                <reflexive file="${project.basedir}/src/entryPoint.php">
		            <filterchain>
		                <replaceregexp>
		                    <regexp
		                        pattern="Version: *[0-9]+\.[0-9]+\.[0-9]+"
		                        replace="Version: ${build.version}" />
		                </replaceregexp>
		            </filterchain>
		        </reflexive>
            </then>
        </if>
        <if>
            <available file="${project.basedir}/src/style.css" property="style_css_exists" />
            <then>
                <reflexive file="${project.basedir}/src/style.css">
		            <filterchain>
		                <replaceregexp>
		                    <regexp
		                        pattern="Version: [0-9]+\.[0-9]+\.[0-9]+"
		                        replace="Version: ${build.version}" />
		                </replaceregexp>
		            </filterchain>
		        </reflexive>
            </then>
        </if>
	</target>

	<target name="clean">
	</target>

	<target name="lint" depends="prepare">
		<phplint haltonfailure="true" cachefile="${reportDir}/phplint.cache">
			<fileset dir="src">
				<include name="**/*.php"/>
			</fileset>
			<fileset dir="test">
				<include name="**/*.php"/>
			</fileset>
		</phplint>
	</target>

	<target name="composer">
	<!--
		We run "composer update" because setBuildVersion would have changed the
		version number in composer.json so we need to update the hash in
		composer.lock. Don't include "no-dev" as we need the dev dependancies
		for unit tests. "composer install" will be run duing the release job to
		remove the dev dependancies prior to packaging.
	 -->
		<composer command="update" composer="${composer.phar}" >
		</composer>
	</target>

	<target name="test" depends="prepare">
		<coverage-setup database="${reportDir}/coverage.db" >
			<fileset dir="src">
				<include name="**/*.php"/>
			</fileset>
		</coverage-setup>
		<phpunit
			bootstrap="${project.basedir}/phpunit-bootstrap.php"
			codecoverage="true"
			haltonerror="true"
			haltonfailure="true"
			printsummary="true"
			>
			<formatter type="plain" usefile="false"/>
			<batchtest>
				<fileset dir="test">
					<include name="**/*Test.php"/>
				</fileset>
			</batchtest>
		</phpunit>
	</target>

	<target name="package" depends="prepare">
		<zip
			destfile="${zipFile}"
			prefix="${phing.project.name}/">
 			<fileset dir=".">
	 			<include name="src/**/**" />
	 			<include name="composer.json" />
	 			<include name="composer.lock" />
				<exclude name="vendor/**" />
 			</fileset>
		</zip>
	</target>

</project>
